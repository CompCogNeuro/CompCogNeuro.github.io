// Code generated by "core generate -add-types -add-funcs"; DO NOT EDIT.

package urakubo

import (
	"cogentcore.org/core/enums"
)

var _ModesValues = []Modes{0, 1}

// ModesN is the highest valid value for type Modes, plus one.
const ModesN Modes = 2

var _ModesValueMap = map[string]Modes{`Test`: 0, `Train`: 1}

var _ModesDescMap = map[Modes]string{0: ``, 1: ``}

var _ModesMap = map[Modes]string{0: `Test`, 1: `Train`}

// String returns the string representation of this Modes value.
func (i Modes) String() string { return enums.String(i, _ModesMap) }

// SetString sets the Modes value from its string representation,
// and returns an error if the string is invalid.
func (i *Modes) SetString(s string) error { return enums.SetString(i, s, _ModesValueMap, "Modes") }

// Int64 returns the Modes value as an int64.
func (i Modes) Int64() int64 { return int64(i) }

// SetInt64 sets the Modes value from an int64.
func (i *Modes) SetInt64(in int64) { *i = Modes(in) }

// Desc returns the description of the Modes value.
func (i Modes) Desc() string { return enums.Desc(i, _ModesDescMap) }

// ModesValues returns all possible values for the type Modes.
func ModesValues() []Modes { return _ModesValues }

// Values returns all possible values for the type Modes.
func (i Modes) Values() []enums.Enum { return enums.Values(_ModesValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Modes) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Modes) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Modes") }

var _LevelsValues = []Levels{0, 1, 2}

// LevelsN is the highest valid value for type Levels, plus one.
const LevelsN Levels = 3

var _LevelsValueMap = map[string]Levels{`Cycle`: 0, `Trial`: 1, `Epoch`: 2}

var _LevelsDescMap = map[Levels]string{0: ``, 1: ``, 2: ``}

var _LevelsMap = map[Levels]string{0: `Cycle`, 1: `Trial`, 2: `Epoch`}

// String returns the string representation of this Levels value.
func (i Levels) String() string { return enums.String(i, _LevelsMap) }

// SetString sets the Levels value from its string representation,
// and returns an error if the string is invalid.
func (i *Levels) SetString(s string) error { return enums.SetString(i, s, _LevelsValueMap, "Levels") }

// Int64 returns the Levels value as an int64.
func (i Levels) Int64() int64 { return int64(i) }

// SetInt64 sets the Levels value from an int64.
func (i *Levels) SetInt64(in int64) { *i = Levels(in) }

// Desc returns the description of the Levels value.
func (i Levels) Desc() string { return enums.Desc(i, _LevelsDescMap) }

// LevelsValues returns all possible values for the type Levels.
func LevelsValues() []Levels { return _LevelsValues }

// Values returns all possible values for the type Levels.
func (i Levels) Values() []enums.Enum { return enums.Values(_LevelsValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Levels) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Levels) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Levels") }

var _StatsPhaseValues = []StatsPhase{0, 1}

// StatsPhaseN is the highest valid value for type StatsPhase, plus one.
const StatsPhaseN StatsPhase = 2

var _StatsPhaseValueMap = map[string]StatsPhase{`Start`: 0, `Step`: 1}

var _StatsPhaseDescMap = map[StatsPhase]string{0: ``, 1: ``}

var _StatsPhaseMap = map[StatsPhase]string{0: `Start`, 1: `Step`}

// String returns the string representation of this StatsPhase value.
func (i StatsPhase) String() string { return enums.String(i, _StatsPhaseMap) }

// SetString sets the StatsPhase value from its string representation,
// and returns an error if the string is invalid.
func (i *StatsPhase) SetString(s string) error {
	return enums.SetString(i, s, _StatsPhaseValueMap, "StatsPhase")
}

// Int64 returns the StatsPhase value as an int64.
func (i StatsPhase) Int64() int64 { return int64(i) }

// SetInt64 sets the StatsPhase value from an int64.
func (i *StatsPhase) SetInt64(in int64) { *i = StatsPhase(in) }

// Desc returns the description of the StatsPhase value.
func (i StatsPhase) Desc() string { return enums.Desc(i, _StatsPhaseDescMap) }

// StatsPhaseValues returns all possible values for the type StatsPhase.
func StatsPhaseValues() []StatsPhase { return _StatsPhaseValues }

// Values returns all possible values for the type StatsPhase.
func (i StatsPhase) Values() []enums.Enum { return enums.Values(_StatsPhaseValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i StatsPhase) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *StatsPhase) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "StatsPhase")
}

var _StimsValues = []Stims{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}

// StimsN is the highest valid value for type Stims, plus one.
const StimsN Stims = 16

var _StimsValueMap = map[string]Stims{`Baseline`: 0, `CaTarg`: 1, `ClampCa1`: 2, `GClamp`: 3, `STDP`: 4, `STDPSweep`: 5, `STDPPacketSweep`: 6, `Poisson`: 7, `SPoissonRGClamp`: 8, `PoissonHzSweep`: 9, `PoissonDurSweep`: 10, `OpPhaseDurSweep`: 11, `ThetaErr`: 12, `ThetaErrComp`: 13, `ThetaErrSweep`: 14, `ThetaErrAllSweep`: 15}

var _StimsDescMap = map[Stims]string{0: ``, 1: ``, 2: ``, 3: ``, 4: ``, 5: ``, 6: ``, 7: ``, 8: ``, 9: ``, 10: ``, 11: ``, 12: ``, 13: ``, 14: ``, 15: ``}

var _StimsMap = map[Stims]string{0: `Baseline`, 1: `CaTarg`, 2: `ClampCa1`, 3: `GClamp`, 4: `STDP`, 5: `STDPSweep`, 6: `STDPPacketSweep`, 7: `Poisson`, 8: `SPoissonRGClamp`, 9: `PoissonHzSweep`, 10: `PoissonDurSweep`, 11: `OpPhaseDurSweep`, 12: `ThetaErr`, 13: `ThetaErrComp`, 14: `ThetaErrSweep`, 15: `ThetaErrAllSweep`}

// String returns the string representation of this Stims value.
func (i Stims) String() string { return enums.String(i, _StimsMap) }

// SetString sets the Stims value from its string representation,
// and returns an error if the string is invalid.
func (i *Stims) SetString(s string) error { return enums.SetString(i, s, _StimsValueMap, "Stims") }

// Int64 returns the Stims value as an int64.
func (i Stims) Int64() int64 { return int64(i) }

// SetInt64 sets the Stims value from an int64.
func (i *Stims) SetInt64(in int64) { *i = Stims(in) }

// Desc returns the description of the Stims value.
func (i Stims) Desc() string { return enums.Desc(i, _StimsDescMap) }

// StimsValues returns all possible values for the type Stims.
func StimsValues() []Stims { return _StimsValues }

// Values returns all possible values for the type Stims.
func (i Stims) Values() []enums.Enum { return enums.Values(_StimsValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Stims) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Stims) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "Stims") }
